/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.subView;

import domainmodels.Camera;
import domainmodels.ManHinh;
import domainmodels.Pin;
import domainmodels.Ram;
import domainmodels.Rom;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.type.IntegerType;
import subRepository.Impl.SubReposBntMhRamPinCamTypeOptImpl;
import support.InputSupport;
import support.SubMessTypeOpt;
import support.SubUIBntMhRamPinCamTypeOpt;
import views.ViewCuaHangBanDienThoai;

/**
 *
 * @author Admin
 */
public class SubUIBntMhRamPinCam extends javax.swing.JFrame {

    /**
     * Creates new form SubUIBntMhRamPinCam
     */
    public SubUIBntMhRamPinCam(SubUIBntMhRamPinCamTypeOpt.TypeSub type) {
        initComponents();
        this.type = type;
        settingTypeUI(type);
        fillData(type);
        setLocationRelativeTo(this);
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtName = new javax.swing.JTextField();
        jlabelName = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jlabelCode = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jlabelTitle = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMain = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        txtkichthuoc = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jlabelName.setText("Tên SP:");

        jlabelCode.setText("Mã SP:");

        jButton1.setText("Quay Lại");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jlabelTitle.setText("SP");

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        tblMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã", "Tên", "Kích Thước"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMain);

        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Kích Thước SP:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(jlabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jlabelName, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                        .addComponent(jlabelCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtkichthuoc)
                                        .addComponent(txtCode, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                                        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
                                    .addGap(2, 2, 2))))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jlabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlabelCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCode))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabelName, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtkichthuoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(jButton1))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new ViewCuaHangBanDienThoai().setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed
    private SubReposBntMhRamPinCamTypeOptImpl controller = new SubReposBntMhRamPinCamTypeOptImpl();
    private SubUIBntMhRamPinCamTypeOpt.TypeSub type;

    private void settingTypeUI(SubUIBntMhRamPinCamTypeOpt.TypeSub type) {
        jlabelCode.setText(SubUIBntMhRamPinCamTypeOpt.code(type));
        jlabelName.setText(SubUIBntMhRamPinCamTypeOpt.name(type));
        jlabelTitle.setText(SubUIBntMhRamPinCamTypeOpt.title(type));
    }

    private boolean checkInputAddAndUpdate() {
        String code = txtCode.getText();
        String name = txtName.getText();
        String kichThuoc = txtkichthuoc.getText();
        if (!InputSupport.checkNullLength(code)) {
            JOptionPane.showMessageDialog(this, "Không được để trống mã.");
            return false;
        }
        if (!InputSupport.checkNullLength(name)) {
            JOptionPane.showMessageDialog(this, "Không được để trống tên.");
            return false;
        }
        if (!InputSupport.checkNullLength(kichThuoc)) {
            JOptionPane.showMessageDialog(this, "Không được để trống kích thước.");
            return false;
        }
        if (!InputSupport.checkUnsignedInt(kichThuoc)) {
            JOptionPane.showMessageDialog(this, "Số kích không hợp lệ.");
            return false;
        }
        return true;
    }

    private boolean checkInputDelete() {
        String code = txtCode.getText();
        if (!InputSupport.checkNullLength(code)) {
            JOptionPane.showMessageDialog(this, "Không được để trống mã.");
            return false;
        }
        return true;
    }

    /*
    * Get data Sản phẩm
     */
    private Rom getDataRom() {
        Rom item = new Rom();
        item.setMa(txtCode.getText().trim());
        item.setBoNho(txtName.getText().trim());
        item.setKichThuoc(Integer.valueOf(txtkichthuoc.getText().trim()));
        return item;
    }

    private Camera getDataCamera() {
        Camera item = new Camera();
        item.setMa(txtCode.getText().trim());
        item.setTen(txtName.getText().trim());
        item.setKichThuoc(Integer.valueOf(txtkichthuoc.getText().trim()));
        return item;
    }

    /*
    * Get data DongSP
     */
    private ManHinh getDataMH() {
        ManHinh item = new ManHinh();
        item.setMa(txtCode.getText().trim());
        item.setDoPhanGiai(txtName.getText().trim());
        item.setKichThuoc(Integer.valueOf(txtkichthuoc.getText().trim()));
        return item;
    }

    /*
    * Get data NSX
     */
    private Ram getDataRam() {
        Ram item = new Ram();
        item.setMa(txtCode.getText().trim());
        item.setTocDoRam(txtName.getText().trim());
        item.setKichThuoc(Integer.valueOf(txtkichthuoc.getText().trim()));
        return item;
    }/*
    * Get data MauSac
     */
    private Pin getDataPin() {
        Pin item = new Pin();
        item.setMaPin(txtCode.getText().trim());
        item.setTenPin(txtName.getText().trim());
        item.setKichThuoc(Integer.valueOf(txtkichthuoc.getText().trim()));
        return item;
    }

    private void fillData(SubUIBntMhRamPinCamTypeOpt.TypeSub type) {
        DefaultTableModel dtm = (DefaultTableModel) tblMain.getModel();
        dtm.setRowCount(0);
        switch (type) {
            case BNT:
                List<Rom> dataRom = controller.getAllDataRom();
                if (dataRom == null || dataRom.size() == 0) {
                    return;
                }
                for (Rom sp : dataRom) {
                    dtm.addRow(new Object[]{
                        sp.getMa(), sp.getBoNho(), sp.getKichThuoc()
                    });
                }
                tblMain.setModel(dtm);
                break;
            case CAM:
                List<Camera> dataCam = controller.getAllDataCamera();
                if (dataCam == null || dataCam.size() == 0) {
                    return;
                }
                for (Camera item : dataCam) {
                    dtm.addRow(new Object[]{
                        item.getMa(), item.getTen(), item.getKichThuoc()
                    });
                }
                tblMain.setModel(dtm);
                break;
            case PIN:
                List<Pin> dataPin = controller.getAllDataPin();
                if (dataPin == null || dataPin.size() == 0) {
                    return;
                }
                for (Pin item : dataPin) {
                    dtm.addRow(new Object[]{
                        item.getMaPin(), item.getTenPin(), item.getKichThuoc()
                    });
                }
                tblMain.setModel(dtm);
                break;
            case RAM:
                List<Ram> dataRam = controller.getAllDataRam();
                if (dataRam == null || dataRam.size() == 0) {
                    return;
                }
                for (Ram item : dataRam) {
                    dtm.addRow(new Object[]{
                        item.getMa(), item.getTocDoRam(), item.getKichThuoc()
                    });
                }
                tblMain.setModel(dtm);
                break;
            case MH:
                List<ManHinh> dataMH = controller.getAllDataMH();
                if (dataMH == null || dataMH.size() == 0) {
                    return;
                }
                for (ManHinh item : dataMH) {
                    dtm.addRow(new Object[]{
                        item.getMa(), item.getDoPhanGiai(), item.getKichThuoc()
                    });
                }
                tblMain.setModel(dtm);
                break;
            default:
                return;
        }
    }

    private void clear() {
        txtCode.setText("");
        txtName.setText("");
        txtkichthuoc.setText("");
    }

    private void fillDataControll(String code, String name, int kichthuoc) {
        txtCode.setText(code);
        txtName.setText(name);
        txtkichthuoc.setText(String.valueOf(kichthuoc));
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (!checkInputDelete()) {
            return;
        }
        switch (type) {
            case BNT:
                SubMessTypeOpt.SubTypeOptReturn(controller.removeRom(txtCode.getText().trim()), this);
                clear();
                break;
            case CAM:
                SubMessTypeOpt.SubTypeOptReturn(controller.removeCamera(txtCode.getText().trim()), this);
                clear();
                break;
            case MH:
                SubMessTypeOpt.SubTypeOptReturn(controller.removeMH(txtCode.getText().trim()), this);
                clear();
                break;
            case PIN:
                SubMessTypeOpt.SubTypeOptReturn(controller.removePin(txtCode.getText().trim()), this);
                clear();
                break;
            case RAM:
                SubMessTypeOpt.SubTypeOptReturn(controller.removeRam(txtCode.getText().trim()), this);
                clear();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Error!");
        }
        fillData(type);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
         if (!checkInputAddAndUpdate()) {
            return;
        }
        switch (type) {
            case BNT:
                SubMessTypeOpt.SubTypeOptReturn(controller.remakeRom(getDataRom()), this);
                clear();
                break;
            case CAM:
                SubMessTypeOpt.SubTypeOptReturn(controller.remakeCamera(getDataCamera()), this);
                clear();
                break;
            case MH:
                SubMessTypeOpt.SubTypeOptReturn(controller.remakeMH(getDataMH()), this);
                clear();
                break;
            case PIN:
                SubMessTypeOpt.SubTypeOptReturn(controller.remakePin(getDataPin()), this);
                clear();
                break;
            case RAM:
                SubMessTypeOpt.SubTypeOptReturn(controller.remakeRam(getDataRam()), this);
                clear();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Error!");
        }
        fillData(type);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMouseClicked
        int row = tblMain.getSelectedRow();
        switch (type) {
            case RAM:
                Ram item1 = controller.getAllDataRam().get(row);
                fillDataControll(item1.getMa(), item1.getTocDoRam(), item1.getKichThuoc());
                break;
            case BNT:
                Rom item5 = controller.getAllDataRom().get(row);
                fillDataControll(item5.getMa(), item5.getBoNho(), item5.getKichThuoc());
                break;
            case PIN:
                Pin item2 = controller.getAllDataPin().get(row);
                fillDataControll(item2.getMaPin(), item2.getTenPin(), item2.getKichThuoc());
                break;
            case CAM:
                Camera item3 = controller.getAllDataCamera().get(row);
                fillDataControll(item3.getMa(), item3.getTen(), item3.getKichThuoc());
                break;
            case MH:
                ManHinh item4 = controller.getAllDataMH().get(row);
                fillDataControll(item4.getMa(),item4.getDoPhanGiai(), item4.getKichThuoc());
                break;
        }
    }//GEN-LAST:event_tblMainMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!checkInputAddAndUpdate()) {
            return;
        }
        switch (type) {
            case BNT:
                SubMessTypeOpt.SubTypeOptReturn(controller.addRom(getDataRom()), this);
                clear();
                break;
            case CAM:
                SubMessTypeOpt.SubTypeOptReturn(controller.addCamera(getDataCamera()), this);
                clear();
                break;
            case MH:
                SubMessTypeOpt.SubTypeOptReturn(controller.addMH(getDataMH()), this);
                clear();
                break;
            case PIN:
                SubMessTypeOpt.SubTypeOptReturn(controller.addPin(getDataPin()), this);
                clear();
                break;
            case RAM:
                SubMessTypeOpt.SubTypeOptReturn(controller.addRam(getDataRam()), this);
                clear();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Error!");
        }
        fillData(type);
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubUIBntMhRamPinCam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubUIBntMhRamPinCam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubUIBntMhRamPinCam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubUIBntMhRamPinCam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlabelCode;
    private javax.swing.JLabel jlabelName;
    private javax.swing.JLabel jlabelTitle;
    private javax.swing.JTable tblMain;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtkichthuoc;
    // End of variables declaration//GEN-END:variables
}
